###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Awards(BaseModel):
    awards: List["Certificates"]

class BasicDetails(BaseModel):
    contacts: "Contacts"
    links: "Links"
    about_me: str

class Certificates(BaseModel):
    name: str
    awarded_by: str

class Company(BaseModel):
    name: str
    position: str
    startdate: str
    enddate: str
    years: int
    description_of_work: str

class Contacts(BaseModel):
    name: str
    title: str
    email: str
    phone: str
    websiteURL: str

class Education(BaseModel):
    universities: List["University"]

class Experience(BaseModel):
    companies: List["Company"]

class Links(BaseModel):
    linkedin: str
    github: str
    others: List[str]

class PersonalProjects(BaseModel):
    projects: List["Project"]

class Project(BaseModel):
    name: str
    technologies_used: List[str]
    description_of_work: List[str]

class Resume(BaseModel):
    basic_details: "BasicDetails"
    skills_and_expertise: "SkillsAndExpertise"
    education: "Education"
    experience: "Experience"
    projects: "PersonalProjects"
    awards: "Awards"

class SkillsAndExpertise(BaseModel):
    programming_languages_known: List[str]
    frameworks_known: List[str]
    technologies_used: List[str]
    languagees_known: List[str]

class University(BaseModel):
    name: str
    degree: str
    major: str
    score: str
    startdate: str
    enddate: str
