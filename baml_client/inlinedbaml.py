###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "client<llm> Llama3 {\n  // Make sure to run 'ollama pull llama3'\n  // before using this client\n  provider ollama\n  options {\n    base_url \"http://localhost:11434/v1\"\n    model \"llama3\"\n  }\n}\n\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "extract_resume.baml": "// Defining a data model.\nclass Resume {\n  basic_details BasicDetails\n  skills_and_expertise SkillsAndExpertise\n  education Education\n  experience Experience\n  projects PersonalProjects\n  awards Awards\n}\n\nclass BasicDetails {\n  contacts Contacts\n  links Links\n  about_me string\n}\n\nclass Contacts {\n  name string\n  title string\n  email string\n  phone string\n  websiteURL string\n}\n\nclass Links {\n  linkedin string\n  github string\n  others string[] \n}\n\nclass SkillsAndExpertise {\n  programming_languages_known string[]\n  frameworks_known string[]\n  technologies_used string[]\n  languagees_known string[] @description(#\"\n    What languages does this person speak?\n  \"#) \n}\n\nclass Education {\n  universities University[] \n}\n\nclass University {\n  name string\n  degree string\n  major string\n  score string\n  startdate string\n  enddate string\n}\n\nclass Experience {\n  companies Company[]\n}\n\nclass Company {\n  name string\n  position string @description(#\"\n    What was the job title or position of the person at this company?\n  \"#)\n  startdate string\n  enddate string\n  years int\n  description_of_work string @description(#\"\n    What work did the person do at this company?\n    What responsibilites were handeled by the person at this company?\n  \"#)\n}\nclass PersonalProjects {\n  projects Project[]\n}\n\nclass Project {\n  name string\n  technologies_used string[]\n  description_of_work string[] @description(#\"\n    What does this project do?\n  \"#)\n}\n\nclass Awards {\n  awards Certificates[]\n}\n\nclass Certificates {\n  name string\n  awarded_by string @description(#\"\n    Who awarded this award/certificate/course?\n  \"#)\n}\n\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string, jobdescription: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client Llama3 // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Given a resume\n    {{ resume }}\n    \n    and a job description \n    {{ jobdescription }},\n\n    Your task is to rewrite the given CV to fit the job description. Follow these guidelines:\n    - Be truthful and objective to the experience listed in the CV\n    - Rearrange projects and skills according to the requirement of the job\n    - Be specific rather than general\n    - Rewrite description of work items using STAR methodology (but do not mention STAR explicitly)\n    - Fix spelling and grammar errors\n    - Write to express not impress\n    - Articulate and don't be flowery\n    - Prefer active voice over passive voice\n    \n    Extract from the updated CV. If no value is available for a field, provide an empty string:\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#,\n    jobdescription #\"\n      Software Engineer\n    \"#\n  }\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.69.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
}

def get_baml_files():
    return file_map